{"version":3,"sources":["../src/index.js"],"names":["convert","TYPES","alternatives","schema","joi","result","oneOf","_inner","matches","forEach","match","push","is","Error","then","otherwise","date","_flags","timestamp","type","format","any","array","_tests","test","name","uniqueItems","minItems","maxItems","arg","ordereds","length","ordered","map","item","list","inclusions","requireds","items","boolean","number","exclusiveMaximum","maximum","exclusiveMinimum","minimum","string","pattern","String","replace","minLength","maxLength","object","properties","additionalProperties","Boolean","allowUnknown","patterns","regex","rule","children","property","presence","key","required","transformer","isJoi","_type","_description","description","_examples","examples","example","_settings","language","label","title","default","undefined","_valids","_set","Array","isArray","module","exports"],"mappings":"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","file":"index.js","sourcesContent":["import assert from 'assert';\n\n// Converter helpers for Joi types.\n\nlet TYPES = {\n\n  alternatives: (schema, joi) => {\n\n    var result = schema.oneOf = [];\n\n    joi._inner.matches.forEach(function (match) {\n\n      if (match.schema) {\n        return result.push(convert(match.schema));\n      }\n\n      if (!match.is) {\n        throw new Error('joi.when requires an \"is\"');\n      }\n      if (!(match.then || match.otherwise)) {\n        throw new Error('joi.when requires one or both of \"then\" and \"otherwise\"');\n      }\n\n      if (match.then) {\n        result.push(convert(match.then));\n      }\n\n      if (match.otherwise) {\n        result.push(convert(match.otherwise));\n      }\n\n    });\n    return schema;\n  },\n\n  date: (schema, joi) => {\n    if (joi._flags.timestamp) {\n      schema.type = 'integer';\n      return schema;\n    }\n\n    schema.type = 'string';\n    schema.format = 'date-time';\n    return schema;\n  },\n\n  any: (schema) => {\n    schema.type = [\n      \"array\",\n      \"boolean\",\n      'number',\n      \"object\",\n      'string',\n      \"null\"\n    ];\n    return schema;\n  },\n\n  array: (schema, joi) => {\n    schema.type = 'array';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'unique':\n          schema.uniqueItems = true;\n          break;\n        case 'length':\n          schema.minItems = schema.maxItems = test.arg;\n          break;\n        case 'min':\n          schema.minItems = test.arg;\n          break;\n        case 'max':\n          schema.maxItems = test.arg;\n          break;\n      }\n    });\n\n    if (joi._inner) {\n      if (joi._inner.ordereds.length) {\n        schema.ordered = joi._inner.ordereds.map((item) => convert(item));\n      }\n\n      let list;\n      if (joi._inner.inclusions.length) {\n        list = joi._inner.inclusions;\n      } else if (joi._inner.requireds.length) {\n        list = joi._inner.requireds;\n      }\n\n      if (list) {\n        schema.items = convert(list[0]);\n      }\n    }\n\n    return schema;\n  },\n\n  boolean: (schema) => {\n    schema.type = 'boolean';\n    return schema;\n  },\n\n  number: (schema, joi) => {\n    schema.type = 'number';\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'integer':\n          schema.type = 'integer';\n          break;\n        case 'less':\n          schema.exclusiveMaximum = true;\n          schema.maximum = test.arg;\n          break;\n        case 'greater':\n          schema.exclusiveMinimum = true;\n          schema.minimum = test.arg;\n          break;\n        case 'min':\n          schema.minimum = test.arg;\n          break;\n        case 'max':\n          schema.maximum = test.arg;\n          break;\n      }\n    });\n    return schema;\n  },\n\n  string: (schema, joi) => {\n    schema.type = 'string';\n\n    joi._tests.forEach((test) => {\n      switch (test.name) {\n        case 'email':\n          schema.format = 'email';\n          break;\n        case 'regex':\n          // for backward compatibility\n          const arg = test.arg;\n\n          // This is required for backward compatibility\n          // Location \"pattern\" had changed since Joi v9.0.0\n          //\n          // For example:\n          //\n          // before Joi v9: test.arg\n          // since Joi v9: test.arg.pattern\n\n          const pattern = arg && arg.pattern ? arg.pattern : arg;\n          schema.pattern = String(pattern).replace(/^\\//,'').replace(/\\/$/,'');\n          break;\n        case 'min':\n          schema.minLength = test.arg;\n          break;\n        case 'max':\n          schema.maxLength = test.arg;\n          break;\n        case 'length':\n          schema.minLength = schema.maxLength = test.arg;\n          break;\n        case 'uri':\n          schema.format = 'uri';\n          break;\n      }\n    });\n\n    return schema;\n  },\n\n  object: (schema, joi) => {\n    schema.type = 'object';\n    schema.properties = {};\n    schema.additionalProperties = Boolean(joi._flags.allowUnknown);\n    schema.patterns = joi._inner.patterns.map((pattern) => {\n      return {regex: pattern.regex, rule: convert(pattern.rule)};\n    });\n\n    if (!joi._inner.children) {\n      return schema;\n    }\n\n    joi._inner.children.forEach((property) => {\n      if(property.schema._flags.presence !== 'forbidden') {\n        schema.properties[property.key] = convert(property.schema);\n        if (property.schema._flags.presence === 'required') {\n          schema.required = schema.required || [];\n          schema.required.push(property.key);\n        }\n      }\n    });\n\n    return schema;\n  }\n};\n\n/**\n * Converts the supplied joi validation object into a JSON schema object,\n * optionally applying a transformation.\n *\n * @param {JoiValidation} joi\n * @param {TransformFunction} [transformer=null]\n * @returns {JSONSchema}\n */\nexport default function convert(joi,transformer=null) {\n\n  assert('object'===typeof joi && true === joi.isJoi, 'requires a joi schema object');\n\n  assert(joi._type, 'joi schema object must have a type');\n\n  if(!TYPES[joi._type]){\n    throw new Error(`sorry, do not know how to convert unknown joi type: \"${joi._type}\"`);\n  }\n\n  if(transformer){\n    assert('function'===typeof transformer, 'transformer must be a function');\n  }\n\n  // JSON Schema root for this type.\n  let schema = {};\n\n  // Copy over the details that all schemas may have...\n  if (joi._description) {\n    schema.description = joi._description;\n  }\n\n  if (joi._examples && joi._examples.length > 0) {\n    schema.examples = joi._examples;\n  } \n  \n  if (joi._examples && joi._examples.length === 1) {\n    schema.example = joi._examples[0];\n  }\n\n  // Add the label as a title if it exists\n  if (joi._settings && joi._settings.language && joi._settings.language.label) {\n    schema.title = joi._settings.language.label;\n  } else if (joi._flags && joi._flags.label) {\n    schema.title = joi._flags.label;\n  }\n\n  // Checking for undefined and null explicitly to allow false and 0 values\n  if (joi._flags && joi._flags.default !== undefined && joi._flags.default !== null) {\n    schema['default'] = joi._flags.default;\n  }\n\n  if (joi._valids && joi._valids._set && joi._valids._set.length){\n    if(Array.isArray(joi._inner.children)) {\n      return {\n        '------oneOf': [\n          {\n            'type': joi._type,\n            'enum': joi._valids._set\n          },\n          TYPES[joi._type](schema, joi)\n        ]\n      };\n    }\n    schema['enum']=joi._valids._set;\n  }\n\n  let result = TYPES[joi._type](schema, joi);\n\n  if(transformer){\n    result = transformer(result);\n  }\n\n  return result;\n}\n\nmodule.exports = exports = convert;\nconvert.TYPES = TYPES;\n\n/**\n * Joi Validation Object\n * @typedef {object} JoiValidation\n */\n\n/**\n * Transformation Function - applied just before `convert()` returns and called as `function(object):object`\n * @typedef {function} TransformFunction\n */\n\n/**\n * JSON Schema Object\n * @typedef {object} JSONSchema\n */\n"]}